name: VS Code Extension – Tests

on:
    push:
        branches: [main]
    pull_request:
        branches: [main]

jobs:
    test:
        name: Node ${{ matrix.node }} • ${{ matrix.os }}
        runs-on: ${{ matrix.os }}
        defaults:
            run:
                shell: bash
                working-directory: ${{ github.workspace }}
        strategy:
            fail-fast: false
            matrix:
                os: [ubuntu-latest, macos-latest, windows-latest]
                node: [20] # VS Code currently builds against Node 20; adjust if needed.

        steps:
            - name: Checkout (manual)
              run: |
                  set -euo pipefail
                  REPO_URL="https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git"
                  git init .
                  git config --global --add safe.directory "$PWD"
                  git remote add origin "$REPO_URL"
                  if [ "${{ github.event_name }}" = "pull_request" ]; then
                    echo "Fetching PR merge ref: refs/pull/${{ github.event.pull_request.number }}/merge"
                    git fetch --no-tags --prune --progress --depth=1 origin "refs/pull/${{ github.event.pull_request.number }}/merge"
                    git checkout --progress --force FETCH_HEAD
                  else
                    echo "Fetching ref: ${{ github.ref }} (sha: ${{ github.sha }})"
                    git fetch --no-tags --prune --progress --depth=1 origin "${{ github.ref }}"
                    git checkout --progress --force ${{ github.sha }}
                  fi

            # Use preinstalled Node on GitHub-hosted runners (Node ${{ matrix.node }} available on latest images)
            - name: Use Node 20 (Linux/macOS)
              if: runner.os != 'Windows'
              run: |
                  set -euo pipefail
                  export NVM_DIR="$HOME/.nvm"
                  if [ ! -s "$NVM_DIR/nvm.sh" ]; then
                    curl -fsSL https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash
                  fi
                  . "$NVM_DIR/nvm.sh"
                  nvm install 20
                  nvm use 20
                  node -v
                  npm -v
                  echo "$(dirname $(which node))" >> "$GITHUB_PATH"

            - name: Use Node 20 (Windows)
              if: runner.os == 'Windows'
              shell: pwsh
              run: |
                  Set-StrictMode -Version Latest
                  choco install nodejs-lts --version=20.17.0 -y --no-progress
                  $env:Path = "C:\\Program Files\\nodejs;" + $env:Path
                  node -v
                  npm -v
                  echo "C:\\Program Files\\nodejs" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

            - name: Install deps
              run: |
                  set -euo pipefail
                  echo "Working directory: $(pwd)"
                  echo "Git status:"
                  git status --porcelain=v1 || true
                  echo "Top-level files:"
                  ls -la
                  if [ -f package-lock.json ]; then
                    echo "Found package-lock.json; running npm ci"
                    npm ci --no-audit --no-fund
                  else
                    echo "package-lock.json missing; running npm install as fallback"
                    npm install --no-audit --no-fund
                  fi

            # Build is handled by npm pretest (compile + lint); no separate build step needed

            # On Linux, VS Code tests need an X server; run them under xvfb
            - name: Test (Linux)
              if: runner.os == 'Linux'
              run: xvfb-run -a npm test

            # On macOS/Windows, just run tests
            - name: Test (macOS/Windows)
              if: runner.os != 'Linux'
              run: npm test

            # (Optional) Upload screenshots/logs/artifacts if your tests produce them
            # - name: Upload test logs
            #   if: always()
            #   uses: actions/upload-artifact@v4
            #   with:
            #     name: test-output-${{ matrix.os }}
            #     path: |
            #       ./**/test-output/**
            #       ./**/logs/**
