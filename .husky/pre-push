#!/usr/bin/env sh
. "$(dirname -- "$0")/_/husky.sh"

set -euo pipefail

# Allow bypass via env if needed
if [ "${SKIP_PREPUSH_TESTS:-}" = "1" ]; then
  exit 0
fi

# Stash any local changes (tracked, staged, and untracked) so tests run against HEAD only
pre_stash_ref="$(git rev-parse -q --verify refs/stash || true)"
STASH_CREATED=0
STASH_MSG="pre-push-$(date +%s)-$$"

# Detect a dirty working tree (unstaged, staged, or untracked)
if git diff --quiet --no-ext-diff \
   && git diff --quiet --no-ext-diff --cached \
   && [ -z "$(git ls-files --others --exclude-standard)" ]; then
  : # clean working tree
else
  git stash push -u -m "$STASH_MSG" >/dev/null 2>&1 || true
  post_stash_ref="$(git rev-parse -q --verify refs/stash || true)"
  if [ "${pre_stash_ref:-}" != "${post_stash_ref:-}" ]; then
    STASH_CREATED=1
  fi
fi

restore_stash() {
  if [ "$STASH_CREATED" -eq 1 ]; then
    # Try to restore the exact stash entry we created
    stash_entry="$(git stash list | grep "$STASH_MSG" | head -n1 | cut -d: -f1 || true)"
    if [ -n "$stash_entry" ]; then
      git stash apply "$stash_entry" >/dev/null 2>&1 || true
      git stash drop "$stash_entry" >/dev/null 2>&1 || true
    else
      git stash pop >/dev/null 2>&1 || true
    fi
  fi
}
trap restore_stash EXIT INT TERM

# Run tests in-place against the current repository (HEAD)
npm test

